diff --git a/node_modules/ethers/lib.esm/utils/geturl.js b/node_modules/ethers/lib.esm/utils/geturl.js
index 1ca8e0f..50b946e 100644
--- a/node_modules/ethers/lib.esm/utils/geturl.js
+++ b/node_modules/ethers/lib.esm/utils/geturl.js
@@ -87,10 +87,16 @@ export function createGetUrl(options) {
                     }
                 });
                 resp.on("end", () => {
-                    if (headers["content-encoding"] === "gzip" && body) {
-                        body = getBytes(gunzipSync(body));
+                    try{
+                        if (headers["content-encoding"] === "gzip" && body) {
+                            body = getBytes(gunzipSync(body));
+                        }
+                        resolve({ statusCode, statusMessage, headers, body });
+                    } catch (error) {
+                        reject(makeError("bad response data", "SERVER_ERROR", {
+                            request: req, info: { response: resp, error }
+                        }));
                     }
-                    resolve({ statusCode, statusMessage, headers, body });
                 });
                 resp.on("error", (error) => {
                     //@TODO: Should this just return nornal response with a server error?
diff --git a/node_modules/ethers/src.ts/utils/geturl.ts b/node_modules/ethers/src.ts/utils/geturl.ts
index 571eaaa..f1bf414 100644
--- a/node_modules/ethers/src.ts/utils/geturl.ts
+++ b/node_modules/ethers/src.ts/utils/geturl.ts
@@ -101,11 +101,16 @@ export function createGetUrl(options?: Record<string, any>): FetchGetUrlFunc {
                 });
 
                 resp.on("end", () => {
-                    if (headers["content-encoding"] === "gzip" && body) {
-                        body = getBytes(gunzipSync(body));
+                    try {
+                        if (headers["content-encoding"] === "gzip" && body) {
+                            body = getBytes(gunzipSync(body));
+                        }
+                        resolve({ statusCode, statusMessage, headers, body });
+                    } catch (error) {
+                        reject(makeError("bad response data", "SERVER_ERROR", {
+                            request: req, info: { response: resp, error }
+                        }));
                     }
-
-                    resolve({ statusCode, statusMessage, headers, body });
                 });
 
                 resp.on("error", (error) => {
