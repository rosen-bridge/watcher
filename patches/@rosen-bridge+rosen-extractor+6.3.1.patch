diff --git a/node_modules/@rosen-bridge/rosen-extractor/dist/lib/getRosenData/bitcoin/BitcoinRpcRosenExtractor.js b/node_modules/@rosen-bridge/rosen-extractor/dist/lib/getRosenData/bitcoin/BitcoinRpcRosenExtractor.js
index 776a528..d93bc3f 100644
--- a/node_modules/@rosen-bridge/rosen-extractor/dist/lib/getRosenData/bitcoin/BitcoinRpcRosenExtractor.js
+++ b/node_modules/@rosen-bridge/rosen-extractor/dist/lib/getRosenData/bitcoin/BitcoinRpcRosenExtractor.js
@@ -90,11 +90,12 @@ export class BitcoinRpcRosenExtractor extends AbstractRosenDataExtractor {
             [this.tokens.getIdKey(BITCOIN_CHAIN)]: BITCOIN_NATIVE_TOKEN,
         });
         if (wrappedBtc.length > 0 && Object.hasOwn(wrappedBtc[0], toChain)) {
-            const satoshiAmount = Math.floor(box.value * 100_000_000);
+            const parts = box.value.toString().split('.');
+            const part1 = ((parts[1] ?? '') + '0'.repeat(8)).substring(0, 8);
             return {
                 from: BITCOIN_NATIVE_TOKEN,
                 to: this.tokens.getID(wrappedBtc[0], toChain),
-                amount: satoshiAmount.toString(),
+                amount: (parts[0] === '0' ? '' : parts[0]) + part1,
             };
         }
         else {
diff --git a/node_modules/@rosen-bridge/rosen-extractor/dist/lib/getRosenData/evm/EvmEthersRosenExtractor.js b/node_modules/@rosen-bridge/rosen-extractor/dist/lib/getRosenData/evm/EvmEthersRosenExtractor.js
index 5e8786e..523a1d4 100644
--- a/node_modules/@rosen-bridge/rosen-extractor/dist/lib/getRosenData/evm/EvmEthersRosenExtractor.js
+++ b/node_modules/@rosen-bridge/rosen-extractor/dist/lib/getRosenData/evm/EvmEthersRosenExtractor.js
@@ -4,10 +4,17 @@ import { EvmRpcRosenExtractor } from './EvmRpcRosenExtractor';
 export class EvmEthersRosenExtractor extends AbstractRosenDataExtractor {
     chain;
     rpcExtractor;
+    supportedTokens;
     constructor(lockAddress, tokens, chain, nativeToken, logger) {
         super(lockAddress, tokens, logger);
         this.chain = chain;
         this.rpcExtractor = new EvmRpcRosenExtractor(lockAddress, tokens, chain, nativeToken, logger);
+        this.supportedTokens = tokens.tokens.map(tokenSet => {
+            if (Object.hasOwn(tokenSet, chain))
+                return tokenSet[chain].tokenId;
+            else
+                return undefined;
+        }).filter(_ => _);
     }
     /**
      * extracts RosenData from given lock transaction in ethers TransactionResponse format
@@ -16,7 +23,14 @@ export class EvmEthersRosenExtractor extends AbstractRosenDataExtractor {
     extractRawData = (txRes) => {
         let transaction;
         try {
-            transaction = Transaction.from(txRes);
+            if (txRes.to &&
+                (txRes.to.toLowerCase() == this.lockAddress ||
+                    this.supportedTokens.includes(txRes.to))) {
+                transaction = Transaction.from(txRes);
+            }
+            else {
+                return undefined;
+            }
         }
         catch (e) {
             this.logger.debug(`An error occurred while deserializing ${this.chain} tx to extract rosen data: ${e}`);
